#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use opts;
use File::Basename;
use Parallel::ForkManager;
use lib qq($FindBin::Bin/./lib);
require ASPU::Copy;
require ASPU::DB;
use My_Utils qw( logging post_to_myslack singlelock sendmail );

our $VERSION = q(0.02);

logging sprintf "%s %s", $0, (join " ", @ARGV);

opts my $parallel => { isa => 'Int', default => 1 },
     my $slack    => { isa => 'Str'  },
     my $mail     => { isa => 'Str'  },
     my $db       => { isa => 'Bool' },
     my $debug    => { isa => 'Bool' };

my $pf = Parallel::ForkManager->new( $parallel );

chdir "/";

singlelock(1);

my $mongodb = ASPU::DB->new;
my $master  = 1;
my %tried;
_PF_:
while (my $data = <STDIN>) {
  my ($path) = $data =~ /^(.+)/;
  defined $path or next _PF_;

  if (exists $tried{$path}) {
    next _PF_;
  } else {
    $tried{$path} = 1;
  }

  $pf->start and next _PF_;
  $master = 0;

  my $obj = ASPU::Copy->new( $path );
  if (my $storage_obj = $obj->copy) {
    $db or next _PF_;
    $mongodb->upsert(
      "path",
      +{
        path      => $path,
        storage   => $storage_obj->account,
        container => $storage_obj->container,
        filename  => basename $path,
      },
    ) or logging "DB store fail: $path";
  } else {
     my $message = "fail: $path";
     post_to_myslack($slack, $message) if $slack;
     sendmail($mail,$message)          if $mail;
  }
  $pf->finish;
}

$pf->wait_all_children;

END {
  singlelock(0) if $master;
};

